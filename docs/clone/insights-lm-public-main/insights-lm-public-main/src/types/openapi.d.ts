/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/webhook/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Recevoir un message et retourner une réponse RAG */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "session_id": "e7b1b2c8-8a7f-4c7a-9a1e-1234567890ab",
                     *       "message": "Quel est le résumé du document ?",
                     *       "user_id": "5f4d3c2b-1a09-4e87-b123-abcdef012345",
                     *       "timestamp": "2025-08-11T08:00:00.000Z"
                     *     } */
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description L'ID du notebook qui sert de session de chat.
                         */
                        session_id: string;
                        /** @description Le message de l'utilisateur. */
                        message: string;
                        /**
                         * Format: uuid
                         * @description L'ID de l'utilisateur authentifié.
                         */
                        user_id: string;
                        /**
                         * Format: date-time
                         * @description L'horodatage du message.
                         */
                        timestamp?: string;
                    };
                };
            };
            responses: {
                /** @description Réponse RAG générée avec succès. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            data?: {
                                output?: {
                                    text?: string;
                                    citations?: components["schemas"]["Citation"][];
                                }[];
                            };
                        };
                    };
                };
                /** @description Requête invalide. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Non autorisé. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Accès interdit (droits insuffisants). */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Requête non traitable (champ manquant/invalide). */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Erreur interne serveur. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhook/process-document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Traite un document uploadé (PDF, TXT, etc.)
         * @description Reçoit un webhook de Supabase Storage lorsqu'un nouveau document est uploadé.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Clé unique pour garantir l'idempotence de la requête d'ingestion (honorée sur /webhook/process-document et /webhook/generate-audio). */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKeyHeader"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        type?: "INSERT";
                        /** @enum {string} */
                        table?: "objects";
                        /** @enum {string} */
                        schema?: "storage";
                        record?: {
                            /** Format: uuid */
                            id?: string;
                            name?: string;
                            bucket_id?: string;
                            /** Format: uuid */
                            owner?: string;
                            metadata?: {
                                mimetype?: string;
                                cacheControl?: string;
                                size?: number;
                                /** Format: uuid */
                                notebook_id?: string;
                                /** Format: uuid */
                                source_id?: string;
                                /**
                                 * Format: uri
                                 * @description URL de callback pour notifier la fin du traitement.
                                 */
                                callback_url?: string;
                            };
                        };
                    };
                };
            };
            responses: {
                /** @description Requête acceptée pour traitement asynchrone. */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                /** @description Requête invalide. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhook/process-additional-sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Traite des sources additionnelles (sites web, texte copié) */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Clé unique pour garantir l'idempotence de la requête d'ingestion (honorée sur /webhook/process-document et /webhook/generate-audio). */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKeyHeader"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CopiedTextPayload"] | components["schemas"]["MultipleWebsitesPayload"];
                };
            };
            responses: {
                /** @description Requête acceptée pour traitement asynchrone. */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                /** @description Requête invalide. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhook/generate-notebook-content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Lancer la génération de contenu pour un notebook */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "source_type": "pdf",
                     *       "notebook_id": "e7b1b2c8-8a7f-4c7a-9a1e-1234567890ab",
                     *       "file_path": "notebooks/e7b1/sources/doc.pdf"
                     *     } */
                    "application/json": {
                        /** @enum {string} */
                        source_type: "pdf" | "txt" | "audio" | "web";
                        /** Format: uuid */
                        notebook_id: string;
                        /** @description Optionnel, si la source est un fichier. */
                        file_path?: string;
                        /** @description Optionnel, si le contenu est fourni directement. */
                        content?: string;
                    } | unknown | unknown;
                };
            };
            responses: {
                /** @description Requête acceptée, la génération a démarré en arrière-plan. */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                /** @description Requête invalide. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Non autorisé. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Accès interdit (droits insuffisants). */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Requête non traitable (champ manquant/invalide). */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Erreur interne serveur. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhook/generate-audio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Lancer la génération asynchrone d'un aperçu audio */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Clé unique pour garantir l'idempotence de la requête d'ingestion (honorée sur /webhook/process-document et /webhook/generate-audio). */
                    "Idempotency-Key"?: components["parameters"]["IdempotencyKeyHeader"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "notebook_id": "e7b1b2c8-8a7f-4c7a-9a1e-1234567890ab",
                     *       "callback_url": "http://localhost:8000/functions/v1/audio-generation-callback"
                     *     } */
                    "application/json": {
                        /** Format: uuid */
                        notebook_id: string;
                        /**
                         * Format: uri
                         * @description URL de l'Edge Function à appeler une fois la génération terminée.
                         */
                        callback_url: string;
                    };
                };
            };
            responses: {
                /** @description Traitement accepté et démarré en arrière-plan. */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                /** @description Requête invalide. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Non autorisé. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Accès interdit (droits insuffisants). */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Requête non traitable (champ manquant/invalide). */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Erreur interne serveur. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Vérifie la disponibilité de base du service */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Service actif */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example ok */
                            status?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Vérifie que toutes les dépendances sont prêtes (DB, Ollama, modèles, GPU) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Service prêt */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ready?: boolean;
                        };
                    };
                };
                /** @description Dépendances manquantes/non prêtes */
                503: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            /**
             * @description Un code d'erreur interne standardisé.
             * @example INVALID_REQUEST
             */
            code?: string;
            /**
             * @description Un message d'erreur clair et lisible.
             * @example Le champ 'session_id' est manquant.
             */
            message?: string;
            /** @description Objet optionnel pour des détails d'erreur supplémentaires. */
            details?: {
                [key: string]: unknown;
            };
            /**
             * @description Identifiant de corrélation de la requête (traçabilité logs).
             * @example 1b2c3d4e-5f6a-7b8c-9d00-112233445566
             */
            correlation_id?: string;
        };
        SuccessResponse: {
            /** @example true */
            success?: boolean;
            /** @example Operation accepted */
            message?: string;
        };
        Citation: {
            /**
             * Format: uuid
             * @description L'ID de la source d'où provient la citation.
             */
            source_id?: string;
            /** @description Les numéros de ligne de la citation dans la source. */
            lines?: {
                from?: number;
                to?: number;
            };
        };
        CopiedTextPayload: {
            /** @enum {string} */
            type: "copied-text";
            /** Format: uuid */
            notebookId: string;
            title: string;
            content: string;
            /** Format: uuid */
            sourceId: string;
            /** Format: date-time */
            timestamp?: string;
        };
        MultipleWebsitesPayload: {
            /** @enum {string} */
            type: "multiple-websites";
            /** Format: uuid */
            notebookId: string;
            urls: string[];
            sourceIds: string[];
            /** Format: date-time */
            timestamp?: string;
        };
    };
    responses: never;
    parameters: {
        /** @description Clé unique pour garantir l'idempotence de la requête d'ingestion (honorée sur /webhook/process-document et /webhook/generate-audio). */
        IdempotencyKeyHeader: string;
        CopiedTextPayload: string;
        MultipleWebsitesPayload: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
