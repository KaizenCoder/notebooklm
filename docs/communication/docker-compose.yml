version: '3.8'

services:  # Service PostgreSQL pour la mémoire NextGeneration
  postgres:
    image: postgres:16-alpine
    container_name: agent_postgres_nextgen
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./config/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      - POSTGRES_DB=nextgen
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    secrets:
      - postgres_password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-agent_memory_nextgen}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - agent_network

  # Service ChromaDB pour la mémoire à long terme
  chromadb:
    image: chromadb/chroma:latest
    container_name: agent_chromadb
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      IS_PERSISTENT: TRUE
      PERSIST_DIRECTORY: /chroma/chroma
      ANONYMIZED_TELEMETRY: FALSE
    ports:
      - "8008:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - agent_network

  # API de mémoire hybride
  memory_api:
    build:
      context: ./memory_api
      dockerfile: Dockerfile
    container_name: agent_memory_api
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-SecurePostgresPassword2024!}@postgres:5432/${POSTGRES_DB:-agent_memory_nextgen}
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-SecurePostgresPassword2024!}
      - POSTGRES_DB=${POSTGRES_DB:-agent_memory_nextgen}
      - POSTGRES_PORT=5432
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - ENVIRONMENT=production
    volumes:
      - ./codebase_docs:/app/codebase_docs:ro
      - ./memory_api/app:/app/app:ro
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_started
    networks:
      - agent_network

  # Service d'orchestration LangGraph
  orchestrator:
    image: nextgeneration-orchestrator
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    container_name: agent_orchestrator
    environment:
      - ORCHESTRATOR_API_KEY=dummy_key_for_testing
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - MEMORY_API_URL=http://memory_api:8001
    volumes:
      - ./orchestrator/app:/app/app:ro
    ports:
      - "8002:8002"
    depends_on:
      - memory_api
    networks:
      - agent_network

  redis:
    image: redis:7.2-alpine
    container_name: nextgen_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  ollama:
    image: ollama/ollama:latest
    container_name: nextgen_ollama
    ports:
      - "11434:11434"
    volumes:
      - D:\\modeles_llm:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped

  temporal:
    image: temporalio/auto-setup:1.21.0
    ports:
      - "7233:7233" # Port gRPC pour les workers/clients
      - "8233:8233" # Port pour l'interface web
    environment:
      - "DB=sqlite3"
      - "DB_OPTS=--db-path /tmp/temporal.db"
      - "SKIP_SCHEMA_SETUP=false"
      - "NUM_HISTORY_SHARDS=1"
      - "DYNAMIC_CONFIG_FILE_PATH=config/dynamic_config.yaml"
    volumes:
      - ./temporal_config:/etc/temporal/config

networks:
  agent_network:
    driver: bridge
    name: agent_network_nextgen

volumes:
  postgres_data:
  chroma_data:
  pg_data:
  redis_data:
  ollama_data:
  temporal_config:

secrets:
  postgres_password:
    file: ./config/postgresql/postgres_password.txt 